
import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt


data = pd.read_csv('data/edges_normalized.csv')  # ensure this file exists

for col in ['risk', 'scenic', 'weather']:
    data[f'norm_{col}'] = data[col] / data[col].max()


a, b, c = 0.5, 0.3, 0.2


G = nx.DiGraph()
for _, row in data.iterrows():
    cost = a * row['norm_risk'] + b * (1 - row['norm_scenic']) + c * row['norm_weather']
    G.add_edge(row['u'], row['v'], cost=cost)


route = nx.shortest_path(G, 'A', 'C', weight='cost')
cost_sum = sum(G[u][v]['cost'] for u, v in zip(route, route[1:]))
print(f"Optimal route: {route}, total cost: {cost_sum:.2f}")


pos = nx.spring_layout(G)  # or load real coordinates for accurate map
plt.figure(figsize=(8,6))
nx.draw(G, pos, node_size=20, edge_color='lightgray')
nx.draw_networkx_nodes(G, pos, nodelist=route, node_color='red', node_size=50)
nx.draw_networkx_edges(G, pos, edgelist=list(zip(route, route[1:])), edge_color='red', width=2)
plt.title('Optimal Dog-Walking Route')
plt.axis('off')
plt.savefig('assets/route_example.png', dpi=150)
